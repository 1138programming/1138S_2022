{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"U`9aA+=)r+L1tzA.)-qi\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"90\" y=\"10\"><next><block type=\"v5_looks_print\" id=\"p7|EdKZG4lXU:I%QQ0~p\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">FALSE</field><value name=\"DATA\"><shadow type=\"text\" id=\"qxFXaDRT)@Hzib3%pC1U\"><field name=\"TEXT\">Subscribe?</field></shadow></value><next><block type=\"v5_motion_set_motor_velocity\" id=\";-t*:#yr(trX8`R}lJ:x\"><field name=\"MOTOR\">IntakeRoller</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"BO?-A[`@@Mf:gV#yz;.o\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"v5_drivetrain_set_drive_stopping\" id=\"w%`pRs:x:H?MD(?=-~6F\"><field name=\"MODE\">brake</field><next><block type=\"v5_motion_set_motor_velocity\" id=\":eCJM0E|`s_D/ghRcB6p\"><field name=\"MOTOR\">Catapult</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"Q|YRRTk%4C2Y{5U~`g;!\"><field name=\"NUM\">60</field></shadow></value><next><block type=\"v5_motion_set_motor_stopping\" id=\"$p|wQsq91U@0Q[ezp5hn\"><field name=\"MOTOR\">Catapult</field><field name=\"MODE\">hold</field><next><block type=\"v5_motion_set_motor_stopping\" id=\";2}BB0?pI|frgpWOcjy{\"><field name=\"MOTOR\">IntakeRoller</field><field name=\"MODE\">brake</field><next><block type=\"v5_control_forever\" id=\"{JL|#ru0T5GvZz|!k}}M\"><statement name=\"SUBSTACK\"><block type=\"v5_other_comment\" id=\"Dn0LhkT6^xs/J)/%F]@{\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"9h-=@hrP9Xx`F=pRA?Tl\"><field name=\"comment\">A = intake spin forever</field></shadow></value><next><block type=\"v5_control_if_then\" id=\"O{e}W0qA+:tTtNL[~9C?\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"V%VjtyZu=)boDn)ek6%a\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonA</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"rY{-@y/qN%IoEpUN2QlI\"><field name=\"MOTOR\">IntakeRoller</field><field name=\"DIRECTION\">fwd</field></block></statement><next><block type=\"v5_other_comment\" id=\"q.Pw[mLP?7w3HrQ7MXI2\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"8JhHs6h.9D0N6v$SZ5HF\"><field name=\"comment\">B = intake stop</field></shadow></value><next><block type=\"v5_control_if_then\" id=\"P7Jk{@3}`Ja^awsALVxe\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"{B-sNKH35BGkCFc$;Dom\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonB</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_stop_motor\" id=\",W`RK+.8%ao~EPjuE4#{\"><field name=\"MOTOR\">IntakeRoller</field></block></statement><next><block type=\"v5_other_comment\" id=\"AmA4RPYOz0MSLUc_2_93\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"N50.Y/=XtT(11F?@Yzaz\"><field name=\"comment\">D-Pad down = load catapult</field></shadow></value><next><block type=\"v5_control_if_then\" id=\"o?e{-YhxfSQd^}xk**;;\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"Iy!KK#-2.,MqL61[S@tY\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonDown</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin_for\" id=\"m{yW*,YAryIz=:,M1Ibf\"><field name=\"MOTOR\">Catapult</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"9GZPgRgaBx0#a4^leV8%\"><field name=\"NUM\">720</field></shadow></value></block></statement><next><block type=\"v5_other_comment\" id=\"NCi,`A4cj.?0=K`vywV-\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"MhQc={|@lg.~DYn-(WPF\"><field name=\"comment\">D-pad up = fire catapult</field></shadow></value><next><block type=\"v5_control_if_then\" id=\"~|qM)IJ`$qfUTZe]8//b\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"9AX[Vyd7vb}4jCwI,]1S\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonUp</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin_for\" id=\"dwiS_:a/di4Bk^Knf/XF\"><field name=\"MOTOR\">Catapult</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">deg</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"oB@hTVk~{aLdVWA2%bKW\"><field name=\"NUM\">360</field></shadow></value></block></statement><next><block type=\"v5_other_comment\" id=\"eYh_?e-_S:90|0dLj{4U\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"1a{r5j:4%v;k@I|lX/.`\"><field name=\"comment\">Right Trigger 1 = spin intake while holding</field></shadow></value><next><block type=\"v5_control_if_then_else\" id=\"uRI@)@6U(}wiHJ:!9Qe$\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\")*zg=uE7#}5X-AGamZ?$\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"?rGOw|EuAxMVX1:mM0.G\"><field name=\"MOTOR\">IntakeRoller</field><field name=\"DIRECTION\">fwd</field></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_stop_motor\" id=\"al7t,mDXMkFNd|t#[bSi\"><field name=\"MOTOR\">IntakeRoller</field></block></statement><next><block type=\"v5_other_comment\" id=\"Vwp0|/2!m.r^9OPott%W\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"+Ryp5k(lv@8JQW=07Qr?\"><field name=\"comment\">Right Trigger 2 = manual catapult</field></shadow></value><next><block type=\"v5_control_if_then_else\" id=\"8P/%Es7c,IiW-Na:7Zv|\"><value name=\"CONDITION\"><block type=\"v5_sensing_pressing_controller\" id=\"HoEvO{OE~!Wp.AbknOLV\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR2</field></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_spin\" id=\"XA[R$gP%S]dAT]o!1?Mc\"><field name=\"MOTOR\">IntakeRoller</field><field name=\"DIRECTION\">fwd</field></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_stop_motor\" id=\"U@y-u:wGJR_itX)-R0:c\"><field name=\"MOTOR\">IntakeRoller</field></block></statement><next><block type=\"v5_other_comment\" id=\"yQNxvMcOZ{tRC5u%OnYl\"><value name=\"COMMENT\"><shadow type=\"comment_text\" id=\"yd1!_~E{FBH{VSo/pjiE\"><field name=\"comment\">Intake can also be spun manually with Left Triggers</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"v5_events_when_autonomous\" id=\"rT:7cJYuRy5%(KCgehx!\" x=\"570\" y=\"-10\"><next><block type=\"v5_drivetrain_drive\" id=\"!I5?[$T.`0?8;jdc^n@e\"><field name=\"DIRECTION\">rev</field><next><block type=\"v5_control_wait\" id=\"[Y:{YtA#UytO2]qQ9CY{\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"ujmx5YVtBs^WGbRIh*px\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"v5_motion_stop_driving\" id=\"_BZFg#i,%Sp_v;ACvtey\"><next><block type=\"v5_motion_spin_for\" id=\"J5;u^|S9(|xgmLlPQ^[-\"><field name=\"MOTOR\">Catapult</field><field name=\"DIRECTION\">rev</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">FALSE</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"=~Ex3W!+IYDj(WzN,nZW\"><field name=\"NUM\">3</field></shadow></value></block></next></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[18,17,16,15,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[3],"name":"Catapult","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"IntakeRoller","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"IntakeRoller","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"tank","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT18, ratio18_1, false);\nmotor leftMotorB = motor(PORT17, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT16, ratio18_1, true);\nmotor rightMotorB = motor(PORT15, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor Catapult = motor(PORT3, ratio18_1, false);\n\nmotor IntakeRoller = motor(PORT10, ratio18_1, false);\n\ncontroller Controller1 = controller(primary);\n\n\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1LeftShoulderControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3\n      // right = Axis2\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position();\n      int drivetrainRightSideSpeed = Controller1.Axis2.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonL1/ButtonL2 status to control IntakeRoller\n      if (Controller1.ButtonL1.pressing()) {\n        IntakeRoller.spin(forward);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonL2.pressing()) {\n        IntakeRoller.spin(reverse);\n        Controller1LeftShoulderControlMotorsStopped = false;\n      } else if (!Controller1LeftShoulderControlMotorsStopped) {\n        IntakeRoller.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1LeftShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.print(\"Subscribe\\?\");\n  IntakeRoller.setVelocity(100.0, percent);\n  Drivetrain.setStopping(brake);\n  Catapult.setVelocity(60.0, percent);\n  Catapult.setStopping(hold);\n  IntakeRoller.setStopping(brake);\n  while (true) {\n    // A = intake spin forever\n    if (Controller1.ButtonA.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    // B = intake stop\n    if (Controller1.ButtonB.pressing()) {\n      IntakeRoller.stop();\n    }\n    // D-Pad down = load catapult\n    if (Controller1.ButtonDown.pressing()) {\n      Catapult.spinFor(reverse, 720.0, degrees, true);\n    }\n    // D-pad up = fire catapult\n    if (Controller1.ButtonUp.pressing()) {\n      Catapult.spinFor(reverse, 360.0, degrees, true);\n    }\n    // Right Trigger 1 = spin intake while holding\n    if (Controller1.ButtonR1.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    else {\n      IntakeRoller.stop();\n    }\n    // Right Trigger 2 = manual catapult\n    if (Controller1.ButtonR2.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    else {\n      IntakeRoller.stop();\n    }\n    // Intake can also be spun manually with Left Triggers\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// \"when autonomous\" hat block\nint onauton_autonomous_0() {\n  Drivetrain.drive(reverse);\n  wait(2.0, seconds);\n  Drivetrain.stop();\n  Catapult.spinFor(reverse, 3.0, turns, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}