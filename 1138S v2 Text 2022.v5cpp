{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT4, ratio18_1, false);\nmotor leftMotorC = motor(PORT8, ratio18_1, false);\nmotor_group leftMotors(leftMotorA, leftMotorB, leftMotorC);\nmotor rightMotorA = motor(PORT1, ratio18_1, true);\nmotor rightMotorB = motor(PORT7, ratio18_1, true);\nmotor rightMotorC = motor(PORT9, ratio18_1, true);\nmotor_group rightMotors(rightMotorA, rightMotorB, rightMotorC);\ndrivetrain Drivetrain(leftMotors, rightMotors, 320, 295, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\n\nbool controlCodeEnabled = true;\n//motors imputs\nbool C1_LeftTriggers = true;\nbool C1_UpDownButtons = true;\nbool C1_LeftDrivetrain = true;\nbool C1_RightDrivetrain = true;\n\n\n\nint C1_LoopFunction() {\n  while(true) {\n    if (controlCodeEnabled) {\n      int LeftDrivetrainSpeed = Controller1.Axis3.position();\n      int RightDrivetrainSpeed = Controller1.Axis2.position();\n\n      //deadban?\n    }\n  }\n}\n\n//beginning of program\nint whenStarted1() {\n  Brain.Screen.print(\"Subscribe/?\");\n  IntakeRoller.setVelocity(95.0, percent);\n  Drivetrain.setStopping(brake);\n  Catapult.setVelocity(60.0, percent);\n  Catapult.setStopping(hold);\n  IntakeRoller.setStopping(brake);\n  while (true) {\n    // A = intake spin forever\n    if (Controller1.ButtonA.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    // B = intake stop\n    if (Controller1.ButtonB.pressing()) {\n      IntakeRoller.stop();\n    }\n    // D-Pad down = load catapult\n    if (Controller1.ButtonDown.pressing()) {\n      Catapult.spinFor(reverse, 720.0, degrees, true);\n    }\n    // D-pad up = fire catapult\n    if (Controller1.ButtonUp.pressing()) {\n      Catapult.spinFor(reverse, 360.0, degrees, true);\n    }\n    // Right Trigger 1 = spin intake while holding\n    if (Controller1.ButtonR1.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    else {\n      IntakeRoller.stop();\n    }\n    // Right Trigger 2 = manual catapult\n    if (Controller1.ButtonR2.pressing()) {\n      IntakeRoller.spin(forward);\n    }\n    else {\n      IntakeRoller.stop();\n    }\n    // Intake can also be spun manually with Left Triggers\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// when autonomous\nint onauton_autonomous_0() {\n  Drivetrain.drive(reverse);\n  wait(2.0, seconds);\n  Drivetrain.stop();\n  Catapult.spinFor(reverse, 3.0, turns, true);\n  return 0;\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}\n","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}