{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the V5 Library\n\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nint Brain_precision = 0, Console_precision = 0, Controller1_precision = 0;\nfloat myVariable;\n\n\n//Robot Configuration\n\n//declaration of motors\nmotor Catapult = motor(PORT3, ratio18_1, false);\nmotor IntakeRollers = motor(PORT10, ratio18_1, false);\n\n//declaration of drivetrain\nmotor leftMotorA = motor(PORT2, ratio18_1, false);\nmotor leftMotorB = motor(PORT4, ratio18_1, false);\nmotor leftMotorC = motor(PORT8, ratio18_1, false);\nmotor_group leftMotors(leftMotorA, leftMotorB, leftMotorC);\nmotor rightMotorA = motor(PORT1, ratio18_1, true);\nmotor rightMotorB = motor(PORT7, ratio18_1, true);\nmotor rightMotorC = motor(PORT9, ratio18_1, true);\nmotor_group rightMotors(rightMotorA, rightMotorB, rightMotorC);\ndrivetrain Drivetrain(leftMotors, rightMotors, 320, 295, 40, mm, 1);\n\n//declaration pf controller\ncontroller Controller1 = controller(primary);\n\n//to enable/disable code\nbool controlCodeEnabled = true;\n\n//motors imput stopping\nbool C1_LeftTriggersStopped = true;\nbool C1_RightTriggersStopped = true;\nbool C1_UpDownButtonsStopped = true;\nbool C1_LeftDrivetrainStopped = true;\nbool C1_RightDrivetrainStopped = true;\n\n\n\nint C1_LoopFunction() {\n  while(true) {\n    if (controlCodeEnabled) {\n      //calculates motor speed from sticks\n      int LeftDrivetrainSpeed = Controller1.Axis3.position();\n      int RightDrivetrainSpeed = Controller1.Axis2.position();\n\n      //establishes a deadzone for stick imputs\n      //left stick deadzone\n      if (LeftDrivetrainSpeed < 5 && LeftDrivetrainSpeed > -5) {\n        if (C1_LeftDrivetrainStopped) {\n          leftMotors.stop();\n          C1_LeftDrivetrainStopped = false;\n        }\n      } else {\n        C1_LeftDrivetrainStopped = true;\n      }\n\n      //Right stick deadzone\n      if (RightDrivetrainSpeed < 5 && RightDrivetrainSpeed > -5) {\n        if (C1_RightDrivetrainStopped) {\n          rightMotors.stop();\n          C1_RightDrivetrainStopped = false;\n        }\n      } else {\n        C1_RightDrivetrainStopped = true;\n      }\n\n      //tells motors to spin only when not in deadzone\n      if (C1_LeftDrivetrainStopped) {\n        leftMotors.setVelocity(LeftDrivetrainSpeed, percent);\n        leftMotors.spin(forward);\n      }\n\n      if (C1_RightDrivetrainStopped) {\n        rightMotors.setVelocity(RightDrivetrainSpeed, percent);\n        rightMotors.spin(forward);\n      }\n\n      //Left triggers for Catapult\n      if (Controller1.ButtonL1.pressing()) {\n        Catapult.spin(forward);\n        C1_LeftTriggersStopped = false;\n      }\n      else if (Controller1.ButtonL2.pressing()) {\n        Catapult.spin(reverse);\n        C1_LeftTriggersStopped = false;\n      }\n      else if (!C1_LeftTriggersStopped) {\n        Catapult.stop();\n        C1_LeftTriggersStopped = true;\n      }\n      \n      //Right triggers for Intake/Rollers\n      if (Controller1.ButtonR1.pressing()) {\n        IntakeRollers.spin(forward);\n        C1_RightTriggersStopped = false;\n      }\n      else if (Controller1.ButtonR2.pressing()) {\n        IntakeRollers.spin(reverse);\n        C1_RightTriggersStopped = false;\n      }\n      else if (!C1_RightTriggersStopped) {\n        IntakeRollers.stop();\n        C1_RightTriggersStopped = true;\n      }\n    }\n  }\n}\n\n//beginning of program\nint whenStarted1() {\n  Brain.Screen.print(\"Subscribe/?\");\n  IntakeRollers.setVelocity(95.0, percent);\n  Drivetrain.setStopping(brake);\n  Catapult.setVelocity(60.0, percent);\n  Catapult.setStopping(hold);\n  IntakeRollers.setStopping(brake);\n  wait(5, msec);\n  }\n  return 0;\n}\n\n// when autonomous\nint onauton_autonomous_0() {\n  //NEEDS AUTON!!!!\n  return 0;\n}\n\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n  vex::task auto0(onauton_autonomous_0);\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  auto0.stop();\n  return;\n}\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}\n","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}